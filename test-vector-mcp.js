import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';
import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function testVectorMCPServer() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º...\n');

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
  const client = new Client({
    name: 'mcp-test-client',
    version: '1.0.0',
  });

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  const transport = new StdioClientTransport({
    command: 'node',
    args: ['src/server-vector.js'],
    cwd: __dirname
  });

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    console.log('1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É...');
    await client.connect(transport, {
      protocolVersion: '2024-11-05',
      capabilities: {
        tools: {}
      },
      clientInfo: {
        name: 'mcp-test-client',
        version: '1.0.0'
      }
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    console.log('2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...');
    const tools = await client.listTools();
    console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ ${tools.tools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:`);
    tools.tools.forEach(tool => {
      console.log(`   ‚Ä¢ ${tool.name}: ${tool.description}`);
    });
    console.log('');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    const statsResult = await client.callTool({
      name: 'get_statistics',
      arguments: {}
    });
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:');
    console.log(statsResult.content[0].text);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞\n');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    const vectorStatsResult = await client.callTool({
      name: 'get_vector_stats',
      arguments: {}
    });
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î:');
    console.log(vectorStatsResult.content[0].text);
    console.log('‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞\n');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    console.log('5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
    const semanticResult = await client.callTool({
      name: 'vector_search',
      arguments: {
        query: '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥',
        limit: 5
      }
    });
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:');
    console.log(semanticResult.content[0].text);
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
    console.log('6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
    const hybridResult = await client.callTool({
      name: 'search_documentation',
      arguments: {
        query: '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Mobile SMARTS',
        limit: 5,
        search_type: 'hybrid'
      }
    });
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:');
    console.log(hybridResult.content[0].text);
    console.log('‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤–æ–π –ø–æ–∏—Å–∫
    console.log('7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
    const keywordResult = await client.callTool({
      name: 'search_documentation',
      arguments: {
        query: '—ç—Ç–∏–∫–µ—Ç–∫–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã',
        limit: 3,
        search_type: 'keyword'
      }
    });
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:');
    console.log(keywordResult.content[0].text);
    console.log('‚úÖ –ö–ª—é—á–µ–≤–æ–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤—ã
    console.log('8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤—ã...');
    const chapterResult = await client.callTool({
      name: 'get_chapter',
      arguments: {
        chapter_id: 1
      }
    });
    console.log('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã:');
    const chapterText = chapterResult.content[0].text;
    console.log(chapterText.substring(0, 300) + '...');
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞:', error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await client.close();
    console.log('\nüîö MCP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testVectorMCPServer().catch(console.error);
