import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';
import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function testMCPServer() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞...\n');

  // –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å
  const serverProcess = spawn('node', ['src/server.js'], {
    cwd: __dirname,
    stdio: ['pipe', 'pipe', 'pipe']
  });

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  const transport = new StdioClientTransport(serverProcess.stdin, serverProcess.stdout);
  const client = new Client(transport);

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await client.connect({
      protocolVersion: '2024-11-05',
      capabilities: {
        tools: {}
      },
      clientInfo: {
        name: 'mcp-test-client',
        version: '1.0.0'
      }
    });

    console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω\n');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const tools = await client.listTools();
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:');
    tools.tools.forEach(tool => {
      console.log(`  - ${tool.name}: ${tool.description}`);
    });
    console.log('');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...');
    const searchResult = await client.callTool('search_documentation', {
      query: 'cleverence'
    });
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResult.content.length}`);
    console.log('');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    const statsResult = await client.callTool('get_statistics', {});
    console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', JSON.stringify(statsResult.content, null, 2));
    console.log('');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤—ã
    console.log('üìñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤—ã...');
    const chapterResult = await client.callTool('get_chapter', {
      chapter_id: 1
    });
    console.log('–ì–ª–∞–≤–∞ 1 –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    console.log('');

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞:', error);
  } finally {
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
    serverProcess.kill();
    await client.close();
  }
}

testMCPServer().catch(console.error);
