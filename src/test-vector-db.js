import VectorDatabase from './vector-database.js';

async function testVectorDatabase() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

  const vectorDB = new VectorDatabase();

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    console.log('1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î...');
    const success = await vectorDB.initialize();
    if (!success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î');
    }
    console.log('‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î:');
    const stats = vectorDB.getStatistics();
    console.log(`   –í—Å–µ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: ${stats.total_embeddings}`);
    console.log(`   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: ${stats.is_initialized ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   –ú–æ–¥–µ–ª—å: ${stats.model_info.name}`);
    console.log(`   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: ${stats.model_info.dimension}`);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞\n');

    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
    const testQueries = [
      '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥',
      '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Mobile SMARTS',
      '–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
      '—ç—Ç–∏–∫–µ—Ç–∫–∏ –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã'
    ];

    for (const query of testQueries) {
      console.log(`\n   –ó–∞–ø—Ä–æ—Å: "${query}"`);
      const results = await vectorDB.semanticSearch(query, 3);
      
      console.log('   –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
      results.forEach((result, index) => {
        console.log(`   ${index + 1}. ${result.title} (—Å—Ö–æ–¥—Å—Ç–≤–æ: ${result.similarity.toFixed(3)})`);
      });
    }
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

    // –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
    console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
    const hybridQuery = '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤';
    console.log(`   –ó–∞–ø—Ä–æ—Å: "${hybridQuery}"`);
    
    const hybridResults = await vectorDB.hybridSearch(hybridQuery, 5);
    console.log('   –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    hybridResults.forEach((result, index) => {
      console.log(`   ${index + 1}. ${result.title} (—Å—á–µ—Ç: ${result.final_score.toFixed(3)}, —Ç–∏–ø: ${result.search_type})`);
    });
    console.log('‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

    // –ö–ª—é—á–µ–≤–æ–π –ø–æ–∏—Å–∫
    console.log('5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
    const keywordQuery = 'Mobile SMARTS';
    console.log(`   –ó–∞–ø—Ä–æ—Å: "${keywordQuery}"`);
    
    const keywordResults = vectorDB.keywordSearch(keywordQuery, 3);
    console.log('   –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
    keywordResults.forEach((result, index) => {
      console.log(`   ${index + 1}. ${result.title} (—Å—Ö–æ–¥—Å—Ç–≤–æ: ${result.similarity.toFixed(3)})`);
    });
    console.log('‚úÖ –ö–ª—é—á–µ–≤–æ–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –≥–ª–∞–≤—ã
    console.log('6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ –≥–ª–∞–≤—ã...');
    const testChapterId = 1;
    const chapterVector = await vectorDB.getChapterVector(testChapterId);
    
    if (chapterVector) {
      console.log(`   –ì–ª–∞–≤–∞ ${testChapterId}: ${chapterVector.title}`);
      console.log(`   –†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞: ${chapterVector.embedding.length}`);
      console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${chapterVector.metadata.generated_at}`);
    } else {
      console.log(`   –ì–ª–∞–≤–∞ ${testChapterId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –≥–ª–∞–≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î:', error);
  } finally {
    await vectorDB.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testVectorDatabase().catch(console.error);
