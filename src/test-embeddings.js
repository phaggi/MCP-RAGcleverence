import SimpleEmbeddingService from './simple-embeddings.js';

async function testEmbeddings() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...\n');

  const embeddingService = new SimpleEmbeddingService();

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    console.log('1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...');
    const success = await embeddingService.initialize();
    if (!success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å');
    }
    console.log('‚úÖ –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    console.log('2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...');
    const testTexts = [
      '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥',
      '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Mobile SMARTS',
      '–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
      '—ç—Ç–∏–∫–µ—Ç–∫–∏ –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã'
    ];

    for (const text of testTexts) {
      console.log(`   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è: "${text}"`);
      const embedding = await embeddingService.generateEmbedding(text);
      console.log(`   ‚úÖ –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: ${embedding.length} –∏–∑–º–µ—Ä–µ–Ω–∏–π\n`);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
    console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞...');
    const embedding1 = await embeddingService.generateEmbedding('–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤');
    const embedding2 = await embeddingService.generateEmbedding('–ø—Ä–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥');
    const embedding3 = await embeddingService.generateEmbedding('–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞');

    const similarity12 = embeddingService.cosineSimilarity(embedding1, embedding2);
    const similarity13 = embeddingService.cosineSimilarity(embedding1, embedding3);

    console.log(`   –°—Ö–æ–¥—Å—Ç–≤–æ "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤" –∏ "–ø—Ä–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥": ${similarity12.toFixed(3)}`);
    console.log(`   –°—Ö–æ–¥—Å—Ç–≤–æ "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤" –∏ "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞": ${similarity13.toFixed(3)}`);
    console.log('‚úÖ –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
    console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤...');
    const queryEmbedding = await embeddingService.generateEmbedding('–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤');
    const embeddings = [
      await embeddingService.generateEmbedding('–ø—Ä–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥'),
      await embeddingService.generateEmbedding('–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞'),
      await embeddingService.generateEmbedding('–æ—Ç–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤'),
      await embeddingService.generateEmbedding('–∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞')
    ];

    const similarVectors = embeddingService.findSimilarVectors(queryEmbedding, embeddings, 3);
    console.log('   –¢–æ–ø-3 –ø–æ—Ö–æ–∂–∏—Ö –≤–µ–∫—Ç–æ—Ä–∞:');
    similarVectors.forEach((result, index) => {
      console.log(`   ${index + 1}. –ò–Ω–¥–µ–∫—Å: ${result.index}, –°—Ö–æ–¥—Å—Ç–≤–æ: ${result.similarity.toFixed(3)}`);
    });
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
    console.log('5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:');
    const modelInfo = embeddingService.getModelInfo();
    console.log(`   –ú–æ–¥–µ–ª—å: ${modelInfo.name}`);
    console.log(`   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: ${modelInfo.dimension}`);
    console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–∞: ${modelInfo.isLoaded ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   –†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è: ${modelInfo.vocabularySize}`);
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞\n');

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testEmbeddings().catch(console.error);
